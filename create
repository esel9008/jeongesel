import cv2
import mediapipe as mp
import numpy as np
import time, os
from PIL import ImageFont, ImageDraw, Image

actions = {
    #'주문1':1,
    #'주문2':1, # 한 손만 인식
    #'가능할까요': 1    # 두 손 인식
    #'여기서': 1,      # 한 손만 인식
    #'먹고 갈게요':1,
    #'포장할게요1':2,
    #'포장할게요2':2,
    #'차갑게주세요':2,
    #'따뜻하게주세요':2
    #'버스':2,
    #'정류장':2,
    #'어디':1,
    #'기차':2,
    #'언제':2,
    #'도착':2,
    #'같이':2,
    #'공부하자':2,
    #'화장실':1,
    #'가고싶어요':1
    #'안녕하세요(1)':2,
    #'안녕하세요(2)':2,
    '만나서':2,
    '반갑습니다':2

}
seq_length = 30
secs_for_action = 30

# MediaPipe hands model
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

cap = cv2.VideoCapture(1)

created_time = int(time.time())
os.makedirs('dataset', exist_ok=True)

fontpath = "fonts/MaruBuri-Bold.ttf"  # Windows 시스템의 예시
font = ImageFont.truetype(fontpath, 30)

while cap.isOpened():
    for action, num_hands in actions.items():
        data = []
        
        # hands 객체를 각 액션에 따라 동적으로 설정
        hands = mp_hands.Hands(
            max_num_hands=num_hands,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5)

        ret, img = cap.read()
        img = cv2.flip(img, 1)

        img_pil = Image.fromarray(img)
        draw = ImageDraw.Draw(img_pil)

        # 한글 텍스트 표시
        #draw.text((10, 30), f'{action.upper()} 동작을 수집하는 중...', font=font, fill=(255, 255, 255))

        # PIL 이미지를 다시 OpenCV 이미지로 변환
        img = np.array(img_pil)
        cv2.waitKey(3000)

        start_time = time.time()

        while time.time() - start_time < secs_for_action:
            ret, img = cap.read()

            img = cv2.flip(img, 1)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            result = hands.process(img)
            img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

            if result.multi_hand_landmarks is not None:
                for res in result.multi_hand_landmarks:
                    joint = np.zeros((21, 4))
                    for j, lm in enumerate(res.landmark):
                        joint[j] = [lm.x, lm.y, lm.z, lm.visibility]

                    # Compute angles between joints
                    v1 = joint[[0,1,2,3,0,5,6,7,0,9,10,11,0,13,14,15,0,17,18,19], :3]  # Parent joint
                    v2 = joint[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], :3]  # Child joint
                    v = v2 - v1  # [20, 3]
                    v = v / np.linalg.norm(v, axis=1)[:, np.newaxis]

                    # Get angle using arcos of dot product
                    angle = np.arccos(np.einsum('nt,nt->n',
                        v[[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18],:], 
                        v[[1,2,3,5,6,7,9,10,11,13,14,15,17,18,19],:]))  # [15,]

                    angle = np.degrees(angle)

                    angle_label = np.array([angle], dtype=np.float32)
                    angle_label = np.append(angle_label, list(actions.keys()).index(action))

                    d = np.concatenate([joint.flatten(), angle_label])

                    data.append(d)

                    mp_drawing.draw_landmarks(img, res, mp_hands.HAND_CONNECTIONS)

            cv2.imshow('img', img)
            if cv2.waitKey(1) == ord('q'):
                break

        data = np.array(data)
        print(action, data.shape)
        np.save(os.path.join('dataset', f'raw_{action}_{created_time}'), data)

        full_seq_data = []
        for seq in range(len(data) - seq_length):
            full_seq_data.append(data[seq:seq + seq_length])

        full_seq_data = np.array(full_seq_data)
        print(action, full_seq_data.shape)
        np.save(os.path.join('dataset', f'seq_{action}_{created_time}'), full_seq_data)
    break
